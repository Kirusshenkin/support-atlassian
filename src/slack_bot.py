#!/usr/bin/env python3
"""
Slack-–±–æ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Confluence.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Socket Mode –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Slack.
"""

import os
import re
import logging
import asyncio
from typing import Optional, Dict, Any

import aiohttp
from dotenv import load_dotenv
from slack_bolt.async_app import AsyncApp
from slack_bolt.adapter.socket_mode.async_handler import AsyncSocketModeHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class ConfluenceQABot:
    """Slack-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π Confluence"""
    
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Slack
        self.slack_bot_token = os.getenv("SLACK_BOT_TOKEN")
        self.slack_app_token = os.getenv("SLACK_APP_TOKEN")
        
        if not self.slack_bot_token or not self.slack_app_token:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω—ã Slack (SLACK_BOT_TOKEN, SLACK_APP_TOKEN)")
        
        # URL QA-—Å–µ—Ä–≤–∏—Å–∞
        self.qa_service_url = os.getenv("QA_SERVICE_URL", "http://localhost:8000")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Slack App
        self.app = AsyncApp(token=self.slack_bot_token)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        # HTTP —Å–µ—Å—Å–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ QA-—Å–µ—Ä–≤–∏—Å—É
        self.http_session: Optional[aiohttp.ClientSession] = None
        
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Slack"""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "ask ..."
        @self.app.message(re.compile(r"^ask\s+(.+)", re.IGNORECASE))
        async def handle_ask_command(message, say, context):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã ask"""
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                question = context["matches"][0]
                user_id = message.get("user")
                channel_id = message.get("channel")
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {question}")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                thinking_message = await say(
                    text="ü§î –ò—â—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...",
                    thread_ts=message.get("ts")
                )
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç QA-—Å–µ—Ä–≤–∏—Å–∞
                answer = await self._get_answer(question)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                if answer:
                    response_text = self._format_response(question, answer)
                else:
                    response_text = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º
                await self.app.client.chat_update(
                    channel=channel_id,
                    ts=thinking_message["ts"],
                    text=response_text,
                    blocks=[
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": response_text
                            }
                        }
                    ]
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ask: {e}")
                await say(
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
                    thread_ts=message.get("ts")
                )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞
        @self.app.event("app_mention")
        async def handle_app_mention(event, say):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞"""
            try:
                text = event.get("text", "")
                user_id = event.get("user")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É ask –≤ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
                ask_match = re.search(r"ask\s+(.+)", text, re.IGNORECASE)
                
                if ask_match:
                    question = ask_match.group(1)
                    logger.info(f"–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ—Ç {user_id}: {question}")
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç—Ä–µ–¥–µ
                    thinking_message = await say(
                        text="ü§î –ò—â—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...",
                        thread_ts=event.get("ts")
                    )
                    
                    answer = await self._get_answer(question)
                    
                    if answer:
                        response_text = self._format_response(question, answer)
                    else:
                        response_text = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
                    
                    await self.app.client.chat_update(
                        channel=event["channel"],
                        ts=thinking_message["ts"],
                        text=response_text,
                        blocks=[
                            {
                                "type": "section",
                                "text": {
                                    "type": "mrkdwn",
                                    "text": response_text
                                }
                            }
                        ]
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
                    help_text = self._get_help_text()
                    await say(
                        text=help_text,
                        thread_ts=event.get("ts")
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                await say(
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    thread_ts=event.get("ts")
                )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help
        @self.app.message(re.compile(r"^help$", re.IGNORECASE))
        async def handle_help(message, say):
            """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
            help_text = self._get_help_text()
            await say(
                text=help_text,
                thread_ts=message.get("ts")
            )
    
    async def _get_answer(self, question: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç QA-—Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not self.http_session:
                self.http_session = aiohttp.ClientSession()
            
            # –ó–∞–ø—Ä–æ—Å –∫ QA-—Å–µ—Ä–≤–∏—Å—É
            url = f"{self.qa_service_url}/ask"
            payload = {"text": question}
            
            async with self.http_session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("answer")
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ QA-—Å–µ—Ä–≤–∏—Å–∞: {response.status} - {error_text}")
                    return None
                    
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ QA-—Å–µ—Ä–≤–∏—Å—É: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ QA-—Å–µ—Ä–≤–∏—Å—É: {e}")
            return None
    
    def _format_response(self, question: str, answer: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Slack"""
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Slack
        answer = answer.replace("&", "&amp;")
        answer = answer.replace("<", "&lt;")
        answer = answer.replace(">", "&gt;")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = f"*–í–æ–ø—Ä–æ—Å:* {question}\n\n"
        response += f"*–û—Ç–≤–µ—Ç:*\n{answer}"
        
        return response
    
    def _get_help_text(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏"""
        return """üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Confluence.

*–ö–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ `ask <–≤–∞—à –≤–æ–ø—Ä–æ—Å>` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è –∏ –¥–æ–±–∞–≤—å—Ç–µ `ask <–≤–æ–ø—Ä–æ—Å>` –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ç—Ä–µ–¥–µ
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ `help` –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ `ask –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API?`
‚Ä¢ `ask where is health endpoint?`
‚Ä¢ `@confluence-bot ask –∫–∞–∫–∏–µ –µ—Å—Ç—å best practices?`

üí° –Ø –∏—â—É –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Confluence."""
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ QA-—Å–µ—Ä–≤–∏—Å–∞
            await self._check_qa_service()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Socket Mode handler
            handler = AsyncSocketModeHandler(self.app, self.slack_app_token)
            
            logger.info("Slack-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await handler.start_async()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def _check_qa_service(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ QA-—Å–µ—Ä–≤–∏—Å–∞"""
        try:
            if not self.http_session:
                self.http_session = aiohttp.ClientSession()
            
            url = f"{self.qa_service_url}/health"
            async with self.http_session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("status") == "healthy":
                        logger.info("QA-—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    else:
                        logger.warning(f"QA-—Å–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤: {data}")
                else:
                    logger.error(f"QA-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
                    
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ QA-—Å–µ—Ä–≤–∏—Å—É: {e}")
            logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.http_session:
            await self.http_session.close()
        logger.info("Slack-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ConfluenceQABot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await bot.stop()


if __name__ == "__main__":
    asyncio.run(main()) 