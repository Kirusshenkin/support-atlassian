#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è AI Confluence Assistant
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_env_var(name: str, required: bool = True) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    value = os.getenv(name)
    
    if not value and required:
        print(f"‚ùå {name}: –Ω–µ –∑–∞–¥–∞–Ω–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        return False
    elif not value:
        print(f"‚ö†Ô∏è  {name}: –Ω–µ –∑–∞–¥–∞–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        return True
    else:
        # –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if "TOKEN" in name or "KEY" in name:
            masked = value[:4] + "..." + value[-4:] if len(value) > 8 else "***"
            print(f"‚úÖ {name}: {masked}")
        else:
            print(f"‚úÖ {name}: {value}")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è AI Confluence Assistant\n")
    
    errors = 0
    
    print("=== Confluence ===")
    if not check_env_var("CF_URL"):
        errors += 1
    if not check_env_var("CF_USER"):
        errors += 1
    if not check_env_var("CF_TOKEN"):
        errors += 1
    if not check_env_var("CF_SPACE"):
        errors += 1
    check_env_var("CF_PAGES", required=False)
    
    print("\n=== Slack ===")
    if not check_env_var("SLACK_BOT_TOKEN"):
        errors += 1
    if not check_env_var("SLACK_APP_TOKEN"):
        errors += 1
    
    print("\n=== OpenAI ===")
    if not check_env_var("OPENAI_API_KEY"):
        errors += 1
    check_env_var("OPENAI_MODEL", required=False)
    
    print("\n=== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ ===")
    check_env_var("RETRIEVER_K", required=False)
    check_env_var("CHUNK_SIZE", required=False)
    check_env_var("CHUNK_OVERLAP", required=False)
    check_env_var("EMBEDDING_MODEL", required=False)
    
    print("\n=== –ü—É—Ç–∏ ===")
    check_env_var("VECTOR_STORE_PATH", required=False)
    check_env_var("REPORT_DIR", required=False)
    
    print("\n=== API ===")
    check_env_var("API_HOST", required=False)
    check_env_var("API_PORT", required=False)
    check_env_var("QA_SERVICE_URL", required=False)
    
    print("\n=== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===")
    check_env_var("LOG_LEVEL", required=False)
    check_env_var("QA_SERVICE_LOG", required=False)
    
    print("\n" + "="*50)
    
    if errors > 0:
        print(f"\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {errors}")
        print("\nüìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print("   cp env.example .env")
        print("   nano .env")
        sys.exit(1)
    else:
        print("\n‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("\nüöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:")
        print("   docker compose run --rm ingest  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        print("   docker compose up -d api bot     # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ===")
    dirs_to_check = ["src", "report", "vector_store", ".github/workflows"]
    for dir_name in dirs_to_check:
        if os.path.exists(dir_name):
            print(f"‚úÖ {dir_name}/")
        else:
            print(f"‚ö†Ô∏è  {dir_name}/ - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")

if __name__ == "__main__":
    main() 